# пример мейкфайла для проекта Азбука ARMатурщика
# лабораторная работа ЛР{labmkmake}
# символ # в начале -- комментарий

# пример использования переменных

# простое присваивание значения переменной
# обнуление переменной
SOMEVAR =
# маски временных файлов
TMPFILES = *.o *.hex *.dump

# целевая платформа $TARGET, часто называют "префикс целевой платформы"
TARGET = arm-none-eabi
# целевой процессор
CPU = cortex-m3
CPUOPT = -mcpu=$(CPU) -mthumb

# присваивание переменной с подстановкой значений другой переменной
# стандартные переменные, задающие команды ассемблера, компилятора и линкера 
AS = $(TARGET)-as
CC = $(TARGET)-gcc
LD = $(TARGET)-ld
OBJDUMP = fix64.exe
# $(TARGET)-objdump
OBJCOPY = $(TARGET)-objcopy
MAKE = make

# нестандартная (?) переменная - опции оптимизации
OPTFLAGS = -O0
# стандартная переменная - флаги компилятора Си
CFLAGS  = $(CPUOPT) $(OPTFLAGS)
# флаги ассемблера
ASFLAGS = $(CPUOPT)

# указание что цели all и clean являются фиктивными целями, а не файлами
.PHONY: all clean

# первая цель, заданная в Makefile, является целью по умолчанию
# и обрабатывается при вызове $(MAKE) без параметров

# стандартная цель, предусматривающая сборку всего проекта 
all: fix64.exe *.o

fix64.exe: fix64.c
	gcc -o $@ $<

# стандартная цель, удаление всех временных и конечных бинарных файлов
clean:
	rm -f $(TMPFILES)

# макро-правило: как компилировать сишные файлы в объектный код
# вместо % в других правилах могут подставляться любые символы, см. цель all
# тэг $@ заменяется на цель правила, т.е. %.o
# тэг $< заменяется на первый источник, т.е. %.с
%.o: %.c Makefile
	$(CC) $(CFLAGS) -c -o $@ $<
	$(OBJDUMP) -d $@

# макро-правило: как компилировать ассемблерные файлы
ASFLAGS = 
%.o: %.S Makefile
	$(AS) $(ASFLAGS) -o $@ $<
	$(OBJDUMP) -d $@
